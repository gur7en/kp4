@startuml
skinparam defaultFontName Liberation Serif

scale 2

' skinparam linetype ortho

class DataBase {
    + Constructor()
    + bool reconnect()
    + void disconnect()
    + UserRole login(string username, string password)
    + void logout()
    + int userID()
    + UserRole userRole()
    + bool checkPassword(string password)
    + bool changePassword(string new_password)
    + QueryResult users(UserRole role_code)
    + QueryResult routes()
    + QueryResult addRoute()
    + QueryResult activateRoute(int id)
    + QueryResult deactivateRoute(int id)
    + QueryResult haulages()
    + QueryResult driverHaulages(int id)
    + QueryResult addHaulage()
    + QueryResult cancelHaulage(int id)
    + QueryResult successHaulage(int id)
    + QueryResult reopenHaulage(int id)
    - int currentUserID
    - UserRole currentUserRole
}

enum Code {
    Unlogin
    Unknown
    Driver
    Logist
    Accounter
}

class UserRole {
    + Constructor(Code code)
    + string toString()
    + Code toCode()
    - Code code
}

class MainWindow {    
    + Constructor(DataBase *db)
    + void openLoginTab()
    + void openProfileTab()
    + void openTabsForLogist()
    + void openTabsForDriver()
    + void openTabsForAccounter()
    + void openDriverDetailTab(int userID)
    + void openAddRouteTab()
    + void openAddHaulageTab()
    - DataBase *db
    - GeneralizedTab[] tabs
    - void addTab(GeneralizedTab *tab, string name)
    - void resetTabs()
}

abstract class GeneralizedTab {
    - DataBase *db
    + Constructor(DataBase *db)
}

class LoginTab {
    + void login()
}

class ProfileTab {
    + void changePassword()
    + void logout()
}

abstract class GeneralizedTableTab {
    - Table *table
    + Constructor(DataBase *db)
    + void showTableContextMenu()
    + void selectedID()
    + void //resetTable()//
}

class DriversTab {
    + Constructor(DataBase *db)
}

class LogistsTab {
    + Constructor(DataBase *db)
}

class AccountersTab {
    + Constructor(DataBase *db)
}

class DriverDetailsTab {
    + Constructor(DataBase *db)
}

class RoutesTab {
    + Constructor(DataBase *db)
    + void addRoute()
    + void changeRouteStatus(int routeID, int new_status)
}

class HaulagesTab {
    + Constructor(DataBase *db)
    + void addHaulage()
    + void changeHaulageStatus(int haulageID, int new_status)
}

class AddRouteTab {
    + Constructor(DataBase *db)
    + void addRoute()
    + void close()
}

class AddHaulageTab {
    + Constructor(DataBase *db)
    + void addHaulage()
    + void close()
}

UserRole *-- Code
DataBase o-left- UserRole
MainWindow o-left- DataBase
MainWindow *-- GeneralizedTab
DataBase --o GeneralizedTab
GeneralizedTab <|.left. LoginTab
GeneralizedTab <|.right. ProfileTab
GeneralizedTab <|.. AddRouteTab
GeneralizedTab <|.. AddHaulageTab
GeneralizedTab <|--- GeneralizedTableTab
GeneralizedTableTab <|.. DriversTab
GeneralizedTableTab <|.. LogistsTab
GeneralizedTableTab <|.. AccountersTab
GeneralizedTableTab <|.. DriverDetailsTab 
GeneralizedTableTab <|.left. RoutesTab
GeneralizedTableTab <|.right. HaulagesTab

AddRouteTab -[hidden]- RoutesTab
AddHaulageTab -[hidden]- HaulagesTab

DriversTab -right[hidden]- DriverDetailsTab

@enduml
